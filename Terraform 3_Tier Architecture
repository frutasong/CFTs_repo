provider "aws" {
  region  = "us-east-1"
}
#Internet VPC
resource "aws_vpc" "main" {
  cidr_block       = "10.50.0.0/16"
  instance_tenancy = "default"
  enable_dns_support = "true"
  enable_dns_hostnames = "true"

  tags = {
    Name = "main"
  }
}
#Internet_Gateway
resource "aws_internet_gateway" "main_igw" {
  vpc_id = "${aws_vpc.main.id}"

  tags = {
    Name = "main_igw"
  }
}
# eip
resource "aws_eip" "main_eip" {
  vpc      = true
}
#NAT_gateway
resource "aws_nat_gateway" "nat_igw" {
  allocation_id = "${aws_eip.main_eip.id}"
  subnet_id = "${aws_subnet.sn_main_public-1.id}"
}
#Subnets_Public-1
resource "aws_subnet" "sn_main_public-1" {
  vpc_id     = "${aws_vpc.main.id}"
  cidr_block = "10.50.0.0/24"
  map_public_ip_on_launch = "true"
  availability_zone = "us-east-1a"

  tags = {
    Name = "sn_main_public-1"
  }
}
#Subnet_Public-2
resource "aws_subnet" "sn_main_public-2" {
  vpc_id     = "${aws_vpc.main.id}"
  cidr_block = "10.50.1.0/24"
  map_public_ip_on_launch = "true"
  availability_zone = "us-east-1b"

  tags = {
    Name = "sn_main_public-2"
  }
}
#Subnet_Private-1
resource "aws_subnet" "sn_main_private-1" {
  vpc_id     = "${aws_vpc.main.id}"
  cidr_block = "10.50.2.0/24"
  map_public_ip_on_launch = "false"
  availability_zone = "us-east-1a"

  tags = {
    Name = "sn_main_private-1"
  }
}
#Subnet_Private-2
resource "aws_subnet" "sn_main_private-2" {
  vpc_id     = "${aws_vpc.main.id}"
  cidr_block = "10.50.3.0/24"
  map_public_ip_on_launch = "false"
  availability_zone = "us-east-1b"

  tags = {
    Name = "sn_main_private-2"
  }
}
# route_tables_Subnet_public-1
resource "aws_route_table" "rt_main_public-1" {
  vpc_id = "${aws_vpc.main.id}"
  route {
    cidr_block = "10.0.0.0/0"
    gateway_id = "${aws_internet_gateway.main_igw.id}"
  }
  tags = {
      Name = "rt_main_public-1" 
  }
}
#route_table_association_subnet_public-1
resource "aws_route_table_association" "rtass_main_public-1" {
    subnet_id = "${aws_subnet.sn_main_public-1.id}"
    route_table_id = "${aws_route_table.rt_main_public-1.id}"
}
#route_table_association_subnet_public-1
resource "aws_route_table_association" "rtass_main_public-2" {
    subnet_id = "${aws_subnet.sn_main_public-2.id}"
    route_table_id = "${aws_route_table.rt_main_public-1.id}"
}

# route_tables_Subnet_private-1
resource "aws_route_table" "rt_main_private-1" {
  vpc_id = "${aws_vpc.main.id}"
  route {
    cidr_block = "10.0.0.0/0"
    gateway_id = "${aws_nat_gateway.nat_igw.id}"
  }
  tags = {
      Name = "rt_main_private-1" 
  }
}
#route_table_association_subnet_private-1
resource "aws_route_table_association" "rtass_main_private-1" {
    subnet_id = "${aws_subnet.sn_main_private-1.id}"
    route_table_id = "${aws_route_table.rt_main_private-1.id}"
}
#route_table_association_subnet_public-1
resource "aws_route_table_association" "rtass_main_private-2" {
    subnet_id = "${aws_subnet.sn_main_private-2.id}"
    route_table_id = "${aws_route_table.rt_main_private-1.id}"
}
#Security Group
resource "aws_security_group" "elb_allow_http_ssh" {
  name = "elb_allow_http_ssh"
  description = "Allow http and ssh inbound traffic"
  vpc_id = "${aws_vpc.main.id}"

  ingress {
    description = "http from VPC"
    protocol  = "tcp"
    from_port = 80
    to_port   = 80
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    description = "ssh from VPC"
    protocol  = "tcp"
    from_port = 22
    to_port   = 22
    cidr_blocks = ["0.0.0.0/0"]
  }  
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "elb_allow_http_ssh"    
  }
}
resource "aws_security_group" "AP_SG_allow_http_ssh" {
  name = "AP_SG_allow_https_ssh"
  description = "Allow http and ssh inbound traffic"
  vpc_id = "${aws_vpc.main.id}"

  ingress {
    description = "http from VPC"
    protocol  = "tcp"
    from_port = 80
    to_port   = 80
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    description = "ssh from VPC"
    protocol  = "tcp"
    from_port = 22
    to_port   = 22
    cidr_blocks = ["0.0.0.0/0"]
  }  
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "AP_SG_allow_https_ssh"    
  }
}
resource "aws_security_group" "DB_SG_allow_https_ssh" {
  name = "DB_SG_allow_https_ssh"
  description = "Allow https and ssh inbound traffic"
  vpc_id = "${aws_vpc.main.id}"

  ingress {
    description = "db from VPC"
    protocol  = "tcp"
    from_port = 3306
    to_port   = 3306
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    description = "ssh from VPC"
    protocol  = "tcp"
    from_port = 22
    to_port   = 22
    cidr_blocks = ["0.0.0.0/0"]
  }  
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "DB_SG_allow_https_ssh"    
  }
}
resource "aws_security_group" "Bastion_SG_allow_ssh" {
  name = "Bastion_SG_allow_ssh"
  description = "Allow Bastion and ssh inbound traffic"
  vpc_id = "${aws_vpc.main.id}"

  ingress {
    description = "http from VPC"
    protocol  = "tcp"
    from_port = 80
    to_port   = 80
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    description = "ssh from VPC"
    protocol  = "tcp"
    from_port = 22
    to_port   = 22
    cidr_blocks = ["0.0.0.0/0"]
  }  
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "Bastion_SG_allow_ssh"    
  }
}
#Instances
resource "aws_instance" "AP_server" {
  ami               = "ami-09a5b0b7edf08843d"
  instance_type     = "t2.micro"
  key_name          = "ExamTest"
  subnet_id         = "${aws_subnet.sn_main_private-1.id}"
  vpc_security_group_ids = ["${aws_security_group.AP_SG_allow_http_ssh.id}"]
  associate_public_ip_address = false

  tags = {
    Name = "AP_server"
  }
}
resource "aws_instance" "Bastion_server" {
  ami               = "ami-09a5b0b7edf08843d"
  instance_type     = "t2.micro"
  key_name          = "ExamTest"
  subnet_id         = "${aws_subnet.sn_main_public-2.id}"
  vpc_security_group_ids = ["${aws_security_group.Bastion_SG_allow_ssh.id}"]
  associate_public_ip_address = true

  tags = {
    Name = "Bastion_server"
  }
}   
#RDS
resource "aws_db_instance" "Mysql_DB" {
  allocated_storage    = 20
  storage_type         = "gp2"
  engine               = "mysql"
  engine_version       = "5.7"
  instance_class       = "db.t2.micro"
  name                 = "Mysql_DB"
  username             = "bereans"
  password             = "bereans002"
  parameter_group_name = "default.mysql5.7"
  skip_final_snapshot  = true
  multi_az             = true
  #db_subnet_group_name = aws_db_subnet_group.sn_main_private-1.name
  #vpc_security_group_ids = [aws_security_group.DB_SG_allow_https_ssh.id]
  #backup_retention_period = 30
 # availability_zone       = "${aws_subnet.sn_main_private-1}"   
}
#ELB
resource "aws_elb" "main_elb" {
  name = "main-elb"
  subnets = ["${aws_subnet.sn_main_public-1.id}","${aws_subnet.sn_main_public-2.id}"]
  security_groups = ["${aws_security_group.elb_allow_http_ssh.id}"]
 listener {
    instance_port = 80
    instance_protocol = "http"
    lb_port = 80
    lb_protocol = "http"
  }

  listener {
    lb_port       = 80
    lb_protocol   = "http"
    instance_port       = "80"
    instance_protocol     = "http"

  }
  cross_zone_load_balancing = true
  health_check {
    healthy_threshold = 2
    unhealthy_threshold = 2
    timeout = 3
    target = "HTTP:80/"
    interval = 30
  }
}
output "elb_ip" {
  value = "${aws_elb.main_elb.dns_name}"
}
#Launch_Configuration
resource "aws_launch_configuration" "main_launchconfig" {
  name_prefix  = "main_launchconfig"
  image_id      = "ami-09a5b0b7edf08843d"
  instance_type = "t2.micro"
  key_name          = "ExamTest"

  security_groups = ["${aws_security_group.elb_allow_http_ssh.id}"]
  associate_public_ip_address = true

  user_data = <<USER_DATA
#!/bin/bash
sudo yum update -y
sudo yum -y install httpd
sudo systemctl start httpd.service
sudo systemctl enable httpd.service
echo "Hello World!Monsieur Plat Is Terraform Guru : $(hostname -f)" > /var/www/html/index.html
sudo chkconfig httpd on
sudo service httpd start
  USER_DATA

  lifecycle {
    create_before_destroy = true
  }
}

#AutoScaling_Group
resource "aws_autoscaling_group" "main_autoscaling" {
  name = "${aws_launch_configuration.main_launchconfig.name}-asg"

  min_size             = 2
  desired_capacity     = 2
  max_size             = 2

  health_check_type    = "ELB"
  load_balancers= [
    "${aws_elb.main_elb.id}"
  ]

  launch_configuration = aws_launch_configuration.main_launchconfig.name
  availability_zones = ["us-east-1a", "us-east-1b"]

  enabled_metrics = [
    "GroupMinSize",
    "GroupMaxSize",
    "GroupDesiredCapacity",
    "GroupInServiceInstances",
    "GroupTotalInstances"
  ]

  metrics_granularity="1Minute"

  vpc_zone_identifier  = [
    "${aws_subnet.sn_main_private-1.id}",
    "${aws_subnet.sn_main_private-2.id}" 
  ]

  # Required to redeploy without an outage.
  lifecycle {
    create_before_destroy = true
  }

  tag {
    key                 = "Name"
    value               = "main_autoscaling"
    propagate_at_launch = true
  }
}